// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model Post {
	id			String			@id @default(cuid())
	createdAt	DateTime		@default(now())
	updatedAt	DateTime		@updatedAt
	title		String			@db.VarChar(255)
	description	String			@db.VarChar(512)
	content		String			@db.Text
	published	Boolean			@default(false)
	thumbnail	Image?			@relation(fields: [thumbnailId], references: [id])
	thumbnailId	String?
	author		User			@relation("postAuthor", fields: [authorId], references: [id])
	tags		PostsToTags[]
	authorId 	String
	comments 	Comment[]
}

enum ImageType {
	THUMBNAIL
	PROFILE
	BANNER
	IMAGE
}

model Image {
	id			String	@id	@default(cuid())
	type		ImageType
	posts		Post[]
	profiles	Profile[]
	url			String
	data		Bytes
}

model Comment {
	id			String		@id @default(cuid())
	createdAt	DateTime	@default(now())
	updatedAt	DateTime	@updatedAt
	content		String		@db.Text
	edited		Boolean		@default(false)
	reply		Boolean		@default(false)
	likes		Int			@default(0)
	depth		Int
	parent		Comment?	@relation("commentLineageRel", fields: [parentId], references: [id])
	parentId	String?
	children 	Comment[]	@relation("commentLineageRel")
	post		Post		@relation(fields: [postId], references: [id])
	postId		String
	author		User		@relation(fields: [authorId], references: [id])
	authorId 	String
}

model Profile {
	id			String	@id	@default(cuid())
	bio			String?	@db.VarChar(255)
	picture		Image?	@relation(fields: [pictureId], references: [id])
	pictureId	String?
	pictureUrl	String?
	user		User	@relation(fields: [userId], references: [id])
	userId		String
}

model Permissions {
	id			String	@id	@default(cuid())
	admin		Boolean	@default(false)
	moderator	Boolean	@default(false)
	post		Boolean	@default(false)
	comment		Boolean	@default(true)
	user		User	@relation(fields: [userId], references: [id])
	userId		String
}

enum Theme {
	dark
	light
}

model Preferences {
	id		String	@id	@default(cuid())
	theme	Theme
	user	User	@relation(fields: [userId], references: [id])
	userId	String
}

model User {
	id			String			@id	@default(cuid())
	email		String			@unique
	firstName	String			@db.VarChar(50)
	lastName	String			@db.VarChar(50)
	password	String			@db.Text
	posts		Post[]			@relation("postAuthor")
	comments 	Comment[]
	profile		Profile?
	permissions Permissions?
	preferences	Preferences?
}

model Tag {
	name	String			@id	@db.Text @unique
	color	String
	posts	PostsToTags[]
}

model PostsToTags {
	post 	Post 	@relation(fields: [postId], references: [id])
	postId 	String
	tag 	Tag 	@relation(fields: [tagName], references: [name])
	tagName String

	@@id([postId, tagName])
}
